name: CMake-release

on:
  push:
    tags:
      - 'v*'

env:
  BUILD_TYPE: Release

permissions:
  contents: read
  actions: write

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        instructions:
          - avx
          - avx2

    steps:
    - uses: actions/checkout@v3
      with:
          submodules: recursive

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DAVX2=${{ matrix.instructions == 'avx2' && 'ON' || 'OFF' }}
      shell: pwsh
      
    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      
    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest -C ${{env.BUILD_TYPE}}

    - name: Prepare binary
      run: |
        if ("${{ matrix.instructions }}" -eq "avx"){
          if ("${{ matrix.os }}" -eq "windows-latest") {
            cp ${{github.workspace}}\build\bin\chat.exe chat.exe
            mv chat.exe chat-windows-latest-avx.exe
          } else {
            cp ${{github.workspace}}/build/bin/chat chat
            mv chat chat-${{ matrix.os }}-${{ matrix.instructions }}
          }
        } else {
          if ("${{ matrix.os }}" -eq "windows-latest") {
            cp ${{github.workspace}}\build\bin\chat.exe chat.exe
            mv chat.exe chat-windows-latest-avx2.exe
          } else {
            cp ${{github.workspace}}/build/bin/chat chat
            mv chat chat-${{ matrix.os }}-${{ matrix.instructions }}
          }
        }
      shell: pwsh

    - name: Upload binary
      uses: actions/upload-artifact@v2
      with:
        name: chat-${{ matrix.os }}-${{ matrix.instructions }}
        path: chat-${{ matrix.os }}-${{ matrix.instructions }}*

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.DEPLOY_KEY }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        path: artifacts

    - name: Upload artifacts
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.DEPLOY_KEY }}
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        files: |
          artifacts/**/*

